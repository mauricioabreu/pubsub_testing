// Code generated by MockGen. DO NOT EDIT.
// Source: subscriber/subscriber.go

// Package mock_subscriber is a generated GoMock package.
package mock_subscriber

import (
	context "context"
	reflect "reflect"

	pubsub "cloud.google.com/go/pubsub"
	gomock "github.com/golang/mock/gomock"
	subscriber "github.com/mauricioabreu/pubsub_testing/subscriber"
)

// MockPubSubClient is a mock of PubSubClient interface.
type MockPubSubClient struct {
	ctrl     *gomock.Controller
	recorder *MockPubSubClientMockRecorder
}

// MockPubSubClientMockRecorder is the mock recorder for MockPubSubClient.
type MockPubSubClientMockRecorder struct {
	mock *MockPubSubClient
}

// NewMockPubSubClient creates a new mock instance.
func NewMockPubSubClient(ctrl *gomock.Controller) *MockPubSubClient {
	mock := &MockPubSubClient{ctrl: ctrl}
	mock.recorder = &MockPubSubClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPubSubClient) EXPECT() *MockPubSubClientMockRecorder {
	return m.recorder
}

// CreateSubscription mocks base method.
func (m *MockPubSubClient) CreateSubscription(ctx context.Context, name string, config pubsub.SubscriptionConfig) (subscriber.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateSubscription", ctx, name, config)
	ret0, _ := ret[0].(subscriber.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateSubscription indicates an expected call of CreateSubscription.
func (mr *MockPubSubClientMockRecorder) CreateSubscription(ctx, name, config interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateSubscription", reflect.TypeOf((*MockPubSubClient)(nil).CreateSubscription), ctx, name, config)
}

// CreateTopic mocks base method.
func (m *MockPubSubClient) CreateTopic(ctx context.Context, topic string) (*pubsub.Topic, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateTopic", ctx, topic)
	ret0, _ := ret[0].(*pubsub.Topic)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateTopic indicates an expected call of CreateTopic.
func (mr *MockPubSubClientMockRecorder) CreateTopic(ctx, topic interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateTopic", reflect.TypeOf((*MockPubSubClient)(nil).CreateTopic), ctx, topic)
}

// Subscription mocks base method.
func (m *MockPubSubClient) Subscription(name string) subscriber.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Subscription", name)
	ret0, _ := ret[0].(subscriber.Subscription)
	return ret0
}

// Subscription indicates an expected call of Subscription.
func (mr *MockPubSubClientMockRecorder) Subscription(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Subscription", reflect.TypeOf((*MockPubSubClient)(nil).Subscription), name)
}

// MockSubscription is a mock of Subscription interface.
type MockSubscription struct {
	ctrl     *gomock.Controller
	recorder *MockSubscriptionMockRecorder
}

// MockSubscriptionMockRecorder is the mock recorder for MockSubscription.
type MockSubscriptionMockRecorder struct {
	mock *MockSubscription
}

// NewMockSubscription creates a new mock instance.
func NewMockSubscription(ctrl *gomock.Controller) *MockSubscription {
	mock := &MockSubscription{ctrl: ctrl}
	mock.recorder = &MockSubscriptionMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSubscription) EXPECT() *MockSubscriptionMockRecorder {
	return m.recorder
}

// Exists mocks base method.
func (m *MockSubscription) Exists(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Exists", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Exists indicates an expected call of Exists.
func (mr *MockSubscriptionMockRecorder) Exists(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Exists", reflect.TypeOf((*MockSubscription)(nil).Exists), ctx)
}
